<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd ">

	<context:property-placeholder
		ignore-unresolvable="true" location="classpath:app.properties" />
	<context:component-scan base-package="lab.quantum.gluu">
		<context:include-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<!-- jedis Connection Pool Configuration -->
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<!--最大连接数 -->
		<property name="maxTotal" value="30" />
		<!--最大空闲连接数 -->
		<property name="maxIdle" value="10" />
		<!--每次释放连接的最大数目 -->
		<property name="numTestsPerEvictionRun" value="1024" />
		<!--释放连接的扫描间隔(单位:毫秒) -->
		<property name="timeBetweenEvictionRunsMillis" value="30000" />
		<!--连接最小空闲时间(单位:毫秒) -->
		<property name="minEvictableIdleTimeMillis" value="100000" />
		<!--连接空闲多久后释放,当空闲时间大于该值并且空闲连接大于最大空闲连接时直接释放连接 -->
		<property name="softMinEvictableIdleTimeMillis" value="10000" />
		<!--获取连接时最大等待毫秒数,如果该值小于0,则阻塞不确定的时长,默认值-1 -->
		<property name="maxWaitMillis" value="1500" />
		<!--在获取连接时检查连接有效性,默认为false -->
		<property name="testOnBorrow" value="false" />
		<!--在连接空闲时检查连接有效性,默认为false -->
		<property name="testWhileIdle" value="true" />
		<!--连接耗尽是否阻塞,false代表抛异常,true代表阻塞直到超时,默认为true -->
		<property name="blockWhenExhausted" value="false" />
	</bean>

	<!-- jedis connection Factory -->
	<bean id="jedisConnFactory"
		class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<property name="poolConfig" ref="jedisPoolConfig" />
		<property name="hostName" value="${redis.hostName}" />
		<property name="port" value="${redis.port}" />
		<property name="password" value="${redis.password}" />
		<property name="timeout" value="${redis.timeout}" />
		<property name="usePool" value="${redis.usePool}" />
	</bean>

	<!-- redis template definition -->
	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
		<property name="connectionFactory" ref="jedisConnFactory" />
		<!-- Serialize method key/hashKey StringRedisSerializer。 -->
		<property name="keySerializer">
			<bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
		</property>
		<property name="hashKeySerializer">
			<bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
		</property>
		<property name="valueSerializer">
			<bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
		</property>
		<property name="hashValueSerializer">
			<bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
		</property>
	</bean>
	<!-- <bean id="lettuceConnectionFactory" class="org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory"> 
		<property name="host-name" value="localhost"/> <property name="port" value="6379"/> 
		</bean> -->

	<bean id="userIDCounter" class="org.springframework.data.redis.support.atomic.RedisAtomicLong">
		<constructor-arg name="redisCounter" value="userIDCounter"></constructor-arg>
		<constructor-arg name="factory" ref="jedisConnFactory"></constructor-arg>
	</bean>

</beans>